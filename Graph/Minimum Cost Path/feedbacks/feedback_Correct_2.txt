"Selected rubric"  
Solution 1: Dijkstra's Algorithm Approach

"Feedback with marks"  
1. Create a data structure to store minimum costs to reach each cell, initialized with maximum value. [1 mark]  
   - The `dist` array is correctly initialized with `Integer.MAX_VALUE`. [1 mark]

2. Set up a priority-based data structure to process cells in order of minimum cost. [1 mark]  
   - A `PriorityQueue` is used to process nodes based on their cost. [1 mark]

3. Initialize the starting point with its cost in both data structures. [1 mark]  
   - The starting point is initialized with its cost in the `dist` array and added to the priority queue. [1 mark]

4. Extract the minimum cost cell from the priority structure. [1 mark]  
   - The code uses `pq.poll()` to extract the minimum cost cell. [1 mark]

5. Explore all four adjacent cells and update costs if cheaper paths are found. [1 mark]  
   - The code correctly explores all four directions and updates costs if a cheaper path is found. [1 mark]

6. Handle edge cases and boundary conditions correctly. [1 mark]  
   - The code checks for boundary conditions and visited cells using `grid[nr][nc] == -1`. [1 mark]

7. Return the minimum cost stored for the destination cell. [1 mark]  
   - The function returns the minimum cost for the destination cell `dist[n - 1][m - 1]`. [1 mark]

"Marks Scored out of total marks"  
7 out of 7 marks