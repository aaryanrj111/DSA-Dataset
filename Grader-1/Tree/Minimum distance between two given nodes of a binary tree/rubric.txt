Minimum Distance Between Two Nodes in a Binary Tree 

Solution 1: Using LCA and Path Length – O(n) Time and O(h) Space
1. Handle null check: return -1 if root is null [1 mark]
2. Return level if root.data equals target value [1 mark]
3. Recursively search left and right subtrees, incrementing level [1 mark]
4. Return appropriate level or -1 based on search results [1 mark]
5. Handle null check and target node checks for LCA [1 mark]
6. Recursively search for both target nodes in left and right subtrees [1 mark]
7. Calculate distance when both nodes are found in different subtrees [1 mark]
8. Return appropriate node (found node or null) [1 mark]
9. Initialize arrays to store depths and distance [1 mark]
10. Find LCA and handle cases when both nodes are found [1 mark]
11. Handle cases when only one node is found [1 mark]
12. Return the calculated distance or -1 if nodes not found [1 mark]

Solution 2: Using LCA – O(n) Time and O(h) Space
1. Handle null check and target node checks for LCA [1 mark]
2. Recursively search left and right subtrees for LCA [1 mark]
3. Determine LCA based on search results [1 mark]
4. Return appropriate node [1 mark]
5. Handle null check: return -1 if root is null for level finding [1 mark]
6. Return level if root.data equals target value [1 mark]
7. Recursively search left and right subtrees, incrementing level [1 mark]
8. Return appropriate level or -1 based on search results [1 mark]
9. Find the LCA of the two nodes [1 mark]
10. Calculate distance from LCA to first node [1 mark]
11. Calculate distance from LCA to second node [1 mark]
12. Return the sum of these distances [1 mark]

Solution 3: Using LCA (One Pass) – O(n) Time and O(h) Space
1. Handle null check: return [0,0] if root is null [1 mark]
2. Recursively calculate distance in left and right subtrees [1 mark]
3. Check if current node is one of the target nodes [1 mark]
4. Update distance when current node is target and other node found in subtree [1 mark]
5. Detect LCA when both target nodes are found in different subtrees [1 mark]
6. Update distance when LCA is found [1 mark]
7. Track node existence and increment distance appropriately [1 mark]
8. Return status and current distance for parent nodes [1 mark]
9. Initialize distance array [1 mark]
10. Call the helper function to calculate distance [1 mark]
11. Return the final calculated distance [2 marks]