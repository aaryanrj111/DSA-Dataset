Check if a Linked List is Palindrome:
1. Solution 1: Using Stack Approach

    1. Create an empty stack and traverse the linked list from head to end, pushing each node's data onto the stack. [1 mark]
    2. Reset to the head of the linked list and compare each node's data with the value popped from the stack. [1 mark]
    3. If any comparison shows unequal values, return false immediately. [1 mark]
    4. If the entire list is traversed with all comparisons being equal, return true (the list is a palindrome). [1 mark]

2. Solution 2: Recursive Approach

    1. Initialize a starting pointer (reference to head) to track forward traversal. [1 mark]
    2. Create a recursive function that traverses to the end of the list and then compares nodes during the recursive callbacks. [1 mark]
    3. During each callback, compare the current end node's data with the start node's data and update the result. [1 mark]
    4. Update the start pointer after each comparison and return the combined result (true only if all comparisons are equal). [1 mark]
3. Solution 3: Optimized Iterative Approach (Two-Pointer)

    1. Find the middle of the linked list using slow and fast pointers technique. [1 mark]
    2. Reverse the second half of the linked list starting from the node after the middle. [1 mark]
    3. Compare the first half with the reversed second half by traversing both simultaneously and checking if values match. [1 mark]
    4. Restore the original list structure by reversing the second half again and reconnecting it to the first half. [1 mark]